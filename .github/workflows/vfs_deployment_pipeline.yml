name: VFS Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      Feature_Branch:
        type: String
        description: Please Enter Branch To Deploy in Environment. 
        required: true
      environment:
        type: choice
        description: Please Select The Deployment Environment.
        options:
          - VFS QA
          - VFS UAT
        default: "VFS QA"
        required: true
      testlevel:
        type: choice
        description: "Select Test class Run Type"
        options:
          - NoTestRun
          - RunLocalTests
          - RunSpecifiedTests
          - RunAllTestsInOrg
        default: "RunSpecifiedTests"
        required: true
      specifiedclass:
        type: String
        description: Please Enter Test Class Names with Camma Seperated.

jobs:
  Deployment_To_VFS_QA:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment == 'VFS QA' }}
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install SFDX
        run: |
          npm install --global sfdx-cli
          sfdx --version
      - name: Generate JWT Key for ${{ github.event.inputs.environment }}
        shell: bash
        run: |
          echo "${{ secrets.SALESFORCE_JWT_SECRET_KEY }}" > server.key
  
      - name: Authorize To ${{ github.event.inputs.environment }}
        run: |
          sfdx force:auth:jwt:grant --clientid=${{secrets.SALESFORCE_CONSUMER_KEY_VFS_QA }} --jwtkeyfile=server.key --username=${{ secrets.SFDX_AUTH_VFS_QA_USERNAME }} --setdefaultdevhubusername

      - name: validation to ${{ github.event.inputs.environment }}
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        run: |
          if ["${{ github.event.inputs.testlevel}}" == "RunLocalTests"]; then
            sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --testlevel ${{github.event.inputs.testlevel}}  --targetusername  ${{ secrets.SFDX_AUTH_VFS_QA_USERNAME }}
          elif ["${{ github.event.inputs.testlevel}}" == "RunAllTestsInOrg"]; then
            sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_QA_USERNAME }} --testlevel ${{github.event.inputs.testlevel}} 
          elif ["${{ github.event.inputs.testlevel}}" == "NoTestRun"]; then
            sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_QA_USERNAME }} 
          else
            sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_QA_USERNAME }} --testlevel ${{github.event.inputs.testlevel}} --runtests ${SFDX_testclass}
          fi
      - name: Deploy to ${{ github.event.inputs.environment }}
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
        run: |
          sfdx force:source:deploy  -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_QA_USERNAME }}


  Deployment_To_VFS_UAT:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment == 'VFS UAT' }}
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install SFDX
        run: |
          npm install --global sfdx-cli
          sfdx --version
      - name: Generate JWT Key for ${{ github.event.inputs.environment }}
        shell: bash
        run: |
          echo "${{ secrets.SALESFORCE_JWT_SECRET_KEY }}" > server.key
  
      - name: Authorize To ${{ github.event.inputs.environment }}
        run: |
          sfdx force:auth:jwt:grant --clientid=${{secrets.SALESFORCE_CONSUMER_KEY_VFS_UAT }} --jwtkeyfile=server.key --username=${{ secrets.SFDX_AUTH_VFS_UAT_USERNAME }} --setdefaultdevhubusername

      - name: validation to ${{ github.event.inputs.environment }}
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}    
        run: |
          if ["${{ github.event.inputs.testlevel}}" == "RunLocalTests"]; then
            sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --testlevel ${{github.event.inputs.testlevel}}  --targetusername  ${{ secrets.SFDX_AUTH_VFS_QA_USERNAME }}
          elif ["${{ github.event.inputs.testlevel}}" == "RunAllTestsInOrg"]; then
            sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_QA_USERNAME }} --testlevel ${{github.event.inputs.testlevel}} 
          elif ["${{ github.event.inputs.testlevel}}" == "NoTestRun"]; then
            sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_QA_USERNAME }} 
          else
            sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_QA_USERNAME }} --testlevel ${{github.event.inputs.testlevel}} --runtests ${SFDX_testclass}
          fi
      - name: Deploy to ${{ github.event.inputs.environment }}
        shell: bash
        env:
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
        run: |
          sfdx force:source:deploy  -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_UAT_USERNAME }}

