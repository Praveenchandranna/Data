name: VFS Validation Pipeline 
on:
  workflow_dispatch:
    inputs:
      Feature_Branch:
        type: String
        description: Please Enter Branch To validate in Environment. 
        required: true
      environment:
        type: choice
        description: Please Select The Validation Environment.
        options:
          - VFS QA
          - VFS QAGlobal
          - VFS UAT
          - VFS HOTFIX
        default: "VFS QA"
        required: true
      testlevel:
        type: choice
        description: Select Test class Run Type.
        options:
          - NoTestRun
          - RunLocalTests
          - RunSpecifiedTests
          - RunAllTestsInOrg
        default: "RunSpecifiedTests"
        required: true
      specifiedclass:
        type: String
        description: Please Enter Test Class Names with Comma Seperated.

jobs:
  Validation_To_VFS_QA:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment == 'VFS QA' }}
    steps:
      - name: Check out files
        uses: actions/checkout@v4

      - name: Install Salesforce CLI
        run: |
          npm install -g @salesforce/cli@latest
          sfdx --version
      - name: Install Salesforce Code Analyzer Plugin
        run: sf plugins install @salesforce/sfdx-scanner@latest

      - name: Generate JWT Key for ${{ github.event.inputs.environment }}
        shell: bash
        run: |
          echo "${{ secrets.SALESFORCE_JWT_SECRET_KEY }}" > server.key
  
      - name: Authorize To ${{ github.event.inputs.environment }}
        run: |
          sfdx force:auth:jwt:grant --client-id=${{secrets.SALESFORCE_CONSUMER_KEY_VFS_QA }} --jwt-key-file=server.key --username=${{ secrets.SFDX_AUTH_VFS_QA_USERNAME }} --set-default-dev-hub
      - name: Run Salesforce Code Analyzer
        id: run-code-analyzer
        uses: forcedotcom/run-code-analyzer@v1
        with:
          run-command: run
          run-arguments: --normalize-severity --target . --outfile results.html --verbose --ruleset ./rulest.xml 
          results-artifact-name: salesforce-code-analyzer-results
      - name: Print Output
        id: output
        run: echo "${{ steps.test-action.outputs.exit-code }}"
      - name: Check the outputs to determine whether to fail
        if: |
          steps.run-code-analyzer.outputs.exit-code > 0 ||
          steps.run-code-analyzer.outputs.num-sev1-violations > 0 ||
          steps.run-code-analyzer.outputs.num-violations > 10
        run: exit 0
      
      - name: Parse coverage results and calculate total coverage
        id: calculate-coverage
        run: |
          total_coverage=$(echo "${{ steps.run-code-analyzer.outputs.coverage }}" | jq '.result.coverage.coverage')
          echo "::set-output name=total-coverage::$total_coverage"
      - name: validation with RunLocalTests for ${{ github.event.inputs.environment }}
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        if: ${{ github.event.inputs.testlevel == 'RunLocalTests'}}
        run: sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen}  --targetusername  ${{ secrets.SFDX_AUTH_VFS_QA_USERNAME }} --testlevel ${{github.event.inputs.testlevel}}

      - name: validation with RunAllTestsInOrg for ${{ github.event.inputs.environment }} 
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        if: ${{ github.event.inputs.testlevel == 'RunAllTestsInOrg'}}
        run: sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_QA_USERNAME }} --testlevel ${{github.event.inputs.testlevel}} 

      - name: validation with NoTestRun for ${{ github.event.inputs.environment }} 
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        if: ${{ github.event.inputs.testlevel == 'NoTestRun'}}  
        run: sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_QA_USERNAME }} 

      - name: validation with RunSpecifiedTests for ${{ github.event.inputs.environment }} 
        id: check-coverage
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        if: ${{ github.event.inputs.testlevel == 'RunSpecifiedTests'}}  
        run: |
          coverage_threshold=85
          total_coverage=$(echo "${{ steps.calculate-coverage.outputs.total-coverage }}")
          if (( $(echo "$total_coverage > $coverage_threshold" | bc -l) )); then
            echo "Code coverage is above 85%. Proceeding with deployment..."
            # Deploy to Salesforce org
            sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_QA_USERNAME }} --testlevel ${{github.event.inputs.testlevel}} --runtests ${SFDX_testclass}
          else
            echo "Code coverage is below 85%. Deployment aborted."
            exit 1
          fi
         
  Validation_To_VFS_QAGlobal:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment == 'VFS QAGlobal' }}
    steps:
      - name: Check out files
        uses: actions/checkout@v4

      - name: Install Salesforce CLI
        run: |
          npm install -g @salesforce/cli@latest
          sfdx --version
      - name: Install Salesforce Code Analyzer Plugin
        run: sf plugins install @salesforce/sfdx-scanner@latest

      - name: Generate JWT Key for ${{ github.event.inputs.environment }}
        shell: bash
        run: |
          echo "${{ secrets.SALESFORCE_JWT_SECRET_KEY }}" > server.key

      - name: Authorize To ${{ github.event.inputs.environment }}
        run: |
          sfdx force:auth:jwt:grant --client-id=${{secrets.SALESFORCE_CONSUMER_KEY_VFS_QAGLOBAL }} --jwt-key-file=server.key --username=${{ secrets.SFDX_AUTH_VFS_QAGLOBAL_USERNAME }} --set-default-dev-hub
      - name: Run Salesforce Code Analyzer
        id: run-code-analyzer
        uses: forcedotcom/run-code-analyzer@v1
        with:
          run-command: run
          run-arguments: --normalize-severity --target . --outfile results.html --verbose --ruleset ./rulest.xml
          results-artifact-name: salesforce-code-analyzer-results
      - name: Print Output
        id: output
        run: echo "${{ steps.test-action.outputs.exit-code }}"
      - name: Check the outputs to determine whether to fail
        if: |
          steps.run-code-analyzer.outputs.exit-code > 0 ||
          steps.run-code-analyzer.outputs.num-sev1-violations > 0 ||
          steps.run-code-analyzer.outputs.num-violations > 10
        run: exit 1
      - name: validation with RunLocalTests for ${{ github.event.inputs.environment }}
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        if: ${{ github.event.inputs.testlevel == 'RunLocalTests'}}
        run: sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen}  --targetusername  ${{ secrets.SFDX_AUTH_VFS_QAGLOBAL_USERNAME }} --testlevel ${{github.event.inputs.testlevel}}

      - name: validation with RunAllTestsInOrg for ${{ github.event.inputs.environment }} 
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        if: ${{ github.event.inputs.testlevel == 'RunAllTestsInOrg'}}
        run: sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_QAGLOBAL_USERNAME }} --testlevel ${{github.event.inputs.testlevel}} 

      - name: validation with NoTestRun for ${{ github.event.inputs.environment }} 
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        if: ${{ github.event.inputs.testlevel == 'NoTestRun'}}  
        run: sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_QAGLOBAL_USERNAME }} 

      - name: validation with RunSpecifiedTests for ${{ github.event.inputs.environment }} 
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        if: ${{ github.event.inputs.testlevel == 'RunSpecifiedTests'}}  
        run: sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_QAGLOBAL_USERNAME }} --testlevel ${{github.event.inputs.testlevel}} --runtests ${SFDX_testclass}
  Validation_To_VFS_UAT:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment == 'VFS UAT' }}
    steps:
      - name: Check out files
        uses: actions/checkout@v4

      - name: Install Salesforce CLI
        run: |
          npm install -g @salesforce/cli@latest
          sfdx --version
      - name: Install Salesforce Code Analyzer Plugin
        run: sf plugins install @salesforce/sfdx-scanner@latest

      - name: Generate JWT Key for ${{ github.event.inputs.environment }}
        shell: bash
        run: |
          echo "${{ secrets.SALESFORCE_JWT_SECRET_KEY }}" > server.key
  
      - name: Authorize To ${{ github.event.inputs.environment }}
        run: |
          sfdx force:auth:jwt:grant --client-id=${{secrets.SALESFORCE_CONSUMER_KEY_VFS_UAT }} --jwt-key-file=server.key --username=${{ secrets.SFDX_AUTH_VFS_UAT_USERNAME }} --set-default-dev-hub
      - name: Run Salesforce Code Analyzer
        id: run-code-analyzer
        uses: forcedotcom/run-code-analyzer@v1
        with:
          run-command: run
          run-arguments: --normalize-severity --target . --outfile results.html --verbose --ruleset ./rulest.xml
          results-artifact-name: salesforce-code-analyzer-results
      - name: Print Output
        id: output
        run: echo "${{ steps.test-action.outputs.exit-code }}"
      - name: Check the outputs to determine whether to fail
        if: |
          steps.run-code-analyzer.outputs.exit-code > 0 ||
          steps.run-code-analyzer.outputs.num-sev1-violations > 0 ||
          steps.run-code-analyzer.outputs.num-violations > 10
        run: exit 1
      
      - name: validation with RunLocalTests for ${{ github.event.inputs.environment }}
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        if: ${{ github.event.inputs.testlevel == 'RunLocalTests'}}
        run: sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen}  --targetusername  ${{ secrets.SFDX_AUTH_VFS_UAT_USERNAME }} --testlevel ${{github.event.inputs.testlevel}}

      - name: validation with RunAllTestsInOrg for ${{ github.event.inputs.environment }} 
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        if: ${{ github.event.inputs.testlevel == 'RunAllTestsInOrg'}}
        run: sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_UAT_USERNAME }} --testlevel ${{github.event.inputs.testlevel}} 


      - name: validation with NoTestRun for ${{ github.event.inputs.environment }} 
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        if: ${{ github.event.inputs.testlevel == 'NoTestRun'}}  
        run: sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_UAT_USERNAME }} 

      - name: validation with RunSpecifiedTests for ${{ github.event.inputs.environment }} 
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        if: ${{ github.event.inputs.testlevel == 'RunSpecifiedTests'}}  
        run: sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_UAT_USERNAME }} --testlevel ${{github.event.inputs.testlevel}} --runtests ${SFDX_testclass}
  Validation_To_VFS_Hotfix:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment == 'VFS HOTFIX' }}
    steps:
      - name: Check out files
        uses: actions/checkout@v4

      - name: Install Salesforce CLI
        run: |
          npm install -g @salesforce/cli@latest
          sfdx --version
      - name: Install Salesforce Code Analyzer Plugin
        run: sf plugins install @salesforce/sfdx-scanner@latest
        
      - name: Generate JWT Key for ${{ github.event.inputs.environment }}
        shell: bash
        run: |
          echo "${{ secrets.SALESFORCE_JWT_SECRET_KEY }}" > server.key
  
      - name: Authorize To ${{ github.event.inputs.environment }}
        run: |
          sfdx force:auth:jwt:grant --client-id=${{secrets.SALESFORCE_CONSUMER_KEY_VFS_HOTFIX }} --jwt-key-file=server.key --username=${{ secrets.SFDX_AUTH_VFS_HOTFIX_USERNAME }} --set-default-dev-hub
      - name: Run Salesforce Code Analyzer
        id: run-code-analyzer
        uses: forcedotcom/run-code-analyzer@v1
        with:
          run-command: run
          run-arguments: --normalize-severity --target . --outfile results.html --verbose --ruleset ./rulest.xml 
          results-artifact-name: salesforce-code-analyzer-results
      - name: Print Output
        id: output
        run: echo "${{ steps.test-action.outputs.exit-code }}"
      - name: Check the outputs to determine whether to fail
        if: |
          steps.run-code-analyzer.outputs.exit-code > 0 ||
          steps.run-code-analyzer.outputs.num-sev1-violations > 0 ||
          steps.run-code-analyzer.outputs.num-violations > 10
        run: exit 1
      - name: validation with RunLocalTests for ${{ github.event.inputs.environment }}
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        if: ${{ github.event.inputs.testlevel == 'RunLocalTests'}}
        run: sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen}  --targetusername  ${{ secrets.SFDX_AUTH_VFS_HOTFIX_USERNAME }} --testlevel ${{github.event.inputs.testlevel}}

      - name: validation with RunAllTestsInOrg for ${{ github.event.inputs.environment }} 
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        if: ${{ github.event.inputs.testlevel == 'RunAllTestsInOrg'}}
        run: sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_HOTFIX_USERNAME }} --testlevel ${{github.event.inputs.testlevel}} 

      - name: validation with NoTestRun for ${{ github.event.inputs.environment }} 
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        if: ${{ github.event.inputs.testlevel == 'NoTestRun'}}  
        run: sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_HOTFIX_USERNAME }} 

      - name: validation with RunSpecifiedTests for ${{ github.event.inputs.environment }} 
        shell: bash
        env:
          SFDX_testclass_Gen: ${{github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_testclass.txt
          SFDX_Package_Gen: ${{ github.workspace }}/manifest/${{github.event.inputs.Feature_Branch}}_package.xml
          SFDX_testclass: ${{github.event.inputs.specifiedclass}}
        if: ${{ github.event.inputs.testlevel == 'RunSpecifiedTests'}}  
        run: sfdx force:source:deploy --checkonly -w 500 -x ${SFDX_Package_Gen} --targetusername ${{ secrets.SFDX_AUTH_VFS_HOTFIX_USERNAME }} --testlevel ${{github.event.inputs.testlevel}} --runtests ${SFDX_testclass}